Бинарная куча (Min-Heap)
import heapq

data = [8, 3, 5, 1, 6, 2, 4, 7]
heapq.heapify(data)
heapq.heappush(data, 0)
min_val = heapq.heappop(data)
print(min_val)

Хеш-таблица
class HashTable:
    def init(self, size):
        self.size = size
        self.table = [None] * size

    def _hash(self, key):
        return hash(key) % self.size

    def set(self, key, value):
        idx = self._hash(key)
        self.table[idx] = (key, value)

    def get(self, key):
        idx = self._hash(key)
        if self.table[idx] and self.table[idx][0] == key:
            return self.table[idx][1]
        raise KeyError(key)

    def remove(self, key):
        idx = self._hash(key)
        if self.table[idx] and self.table[idx][0] == key:
            self.table[idx] = None
        else:
            raise KeyError(key)

Куча Фибоначчи (упрастил реализацию на Python)
class FibonacciHeap:
    class Node:
        def init(self, key):
            self.key = key
            self.degree = 0
            self.mark = False
            self.parent = None
            self.child = None
            self.left = self
            self.right = self

    def init(self):
        self.min_node = None
        self.count = 0

    def insert(self, key):
        node = self.Node(key)
        if self.min_node is None:
            self.min_node = node
        else:
            self._add_to_root_list(node)
            if key < self.min_node.key:
                self.min_node = node
        self.count += 1

    def _add_to_root_list(self, node):
        node.left = self.min_node
        node.right = self.min_node.right
        self.min_node.right.left = node
        self.min_node.right = node

    def get_min(self):
        return self.min_node.key if self.min_node else None

fib_heap = FibonacciHeap()
fib_heap.insert(10)
fib_heap.insert(5)
print(fib_heap.get_min())

ht = HashTable(10)
ht.set("Alice", "January")
print(ht.get("Alice"))
